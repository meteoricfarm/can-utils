# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -S . -B build

    - name: Build
      # Build your program with the given configuration
      run: cmake --build build

    - name: Polaris Scan
      id: polaris-scan
      uses: blackduck-inc/black-duck-security-scan@v2
      with:
        ### SCANNING: Required fields
        polaris_server_url: ${{ vars.POLARIS_SERVER_URL }}
        polaris_access_token: ${{ secrets.POLARIS_ACCESS_TOKEN }}
        polaris_assessment_types: "SAST"
          
        ### SCANNING: Optional fields
        # polaris_application_name: ${{ github.event.repository.name }}
        # polaris_project_name: ${{ github.event.repository.name }}
          
        ### PULL REQUEST COMMENTS: Uncomment below to enable
        # polaris_prComment_enabled: true 
        # github_token: ${{ secrets.GITHUB_TOKEN }} # Required when PR comments is enabled

        ### SARIF report parameters
        #polaris_reports_sarif_create: true
        #polaris_upload_sarif_report: true
          
        ### Signature scan
        #polaris_test_sca_type: "SCA-SIGNATURE"
          
        ### Mark build status if policy violating issues are found
        # mark_build_status: 'success'
          
    ### Uncomment below configuration to add custom logic based on return status
    # - name: cmdLine
    #   id: cmdLine
    #   run: |
    #     EXIT_CODE=${{ steps.polaris-scan.outputs.status }}
    #     echo "Polaris Scan exit status - $EXIT_CODE"
